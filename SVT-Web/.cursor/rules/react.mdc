---
description: 
globs: 
alwaysApply: false
---
# 任务：为Spring Boot后端项目构建一个React 18前端应用

### 角色
你是一位资深的React前端架构师，精通现代前端技术栈和前后端分离的最佳实践。

### 背景
我有一个基于Spring Boot 3的后端项目，名为SVT。它已经实现了以下核心功能：
1.  **用户认证:** 通过RESTful API提供登录接口。
2.  **权限管理:** 能够管理不同用户的访问权限。
3.  **数据接口:** 提供受保护的数据API。

现在，我需要你指导我使用React 18为这个后端构建一个功能完整的前端管理后台。

### 核心任务
你的任务是提供一个详细的、分步的指南，包括必要的代码片段和最佳实践解释，来完成以下前端功能的开发：

1.  **项目初始化与结构搭建**
2.  **实现用户登录/注销功能**
3.  **实现受保护的路由（路由守卫）**
4.  **构建一个基本的主页布局（仪表盘）**
5.  **封装API请求模块**
6.  **使用全局状态管理用户信息**

### 技术栈要求
* **React:** 18+
* **构建工具:** Vite
* **路由:** `react-router-dom` v6
* **UI 组件库:** Ant Design v5
* **HTTP客户端:** `axios`
* **状态管理:** React Context API with Hooks

### 关键假设 (API契约)
由于后端API的具体细节未知，我们做出以下**合理假设**。请在你的代码示例中基于这些假设进行开发：

* **登录接口:**
    * **Endpoint:** `POST /api/auth/login`
    * **Request Body:** `{ "username": "xxx", "password": "xxx" }`
    * **Success Response (200 OK):** `{ "token": "a.jwt.token", "user": { "id": 1, "username": "admin", "roles": ["ADMIN"] } }`
* **获取用户信息接口:**
    * **Endpoint:** `GET /api/user/profile`
    * **Headers:** `Authorization: Bearer <token>`
    * **Success Response (200 OK):** `{ "id": 1, "username": "admin", "avatar": "url/to/avatar.png" }`
* **后端开发服务器地址:** `http://localhost:8080` (用于axios和Vite代理配置)

### 任务分解 (请按以下步骤提供指导)

**步骤一：项目初始化与环境配置**
1.  使用Vite创建一个新的React项目（选择TypeScript模板）。
2.  安装所有必要的依赖：`react-router-dom`, `axios`, `antd`。
3.  配置Vite的`vite.config.ts`文件，设置一个代理(proxy)来解决开发环境的CORS问题，将`/api`的请求转发到`http://localhost:8080`。

**步骤二：项目结构创建**
根据行业最佳实践，创建以下目录结构，并简要说明每个目录的用途：
`src/api`, `src/assets`, `src/components`, `src/context`, `src/hooks`, `src/layouts`, `src/pages`, `src/router`, `src/utils`

**步骤三：API服务层封装**
1.  在 `src/utils/request.js` (或 `.ts`) 中创建并配置一个axios实例。
2.  设置请求拦截器，用于自动在请求头中添加Authorization Token。
3.  设置响应拦截器，用于全局处理API错误（特别是401未授权，此时应自动登出）。
4.  在 `src/api/auth.js` 中，创建具体的`login` API调用函数。

**步骤四：全局状态管理 (AuthContext)**
1.  在 `src/context/AuthContext.js` 中，使用`createContext`和`useReducer`创建一个`AuthContext`。
2.  这个Context需要管理的状态应包括：`isAuthenticated` (boolean), `user` (object | null), `token` (string | null)。
3.  提供一个`AuthProvider`组件，它包含登录、注销的逻辑，并使用`localStorage`来持久化token。

**步骤五：路由系统与路由守卫**
1.  在 `src/router/index.js` 中配置应用的所有路由。
2.  定义公共路由（如 `/login`）和私有路由（如 `/`, `/dashboard`, `/users`）。
3.  创建一个`ProtectedRoute`组件（或在`layouts`中实现），它会检查`AuthContext`中的登录状态。如果用户未登录，则使用`<Navigate to="/login" />`重定向。

**步骤六：页面与组件实现**
1.  **登录页面 (`src/pages/Login.jsx`):**
    * 使用Ant Design的`Form`, `Input`, `Button`组件创建一个登录表单。
    * 表单提交时，调用`AuthContext`中的登录函数。
    * 成功后应自动跳转到主页。
2.  **主布局 (`src/layouts/BasicLayout.jsx`):**
    * 使用Ant Design的`Layout`, `Menu`, `Header`, `Sider`, `Content`组件创建一个经典的后台管理布局。
    * 头部应显示当前登录的用户名和“注销”按钮。
    * 点击注销按钮时，调用`AuthContext`的注销函数。
3.  **将所有部分整合到 `App.jsx` 中**，使用`AuthProvider`包裹路由配置。

请为每个关键步骤提供清晰、可复制的代码片段，并附上必要的注释和解释。